
public class Test {
	//public Test() {}
	private static Test t = new Test();
	private Test() {} //외부에서 사용자가 직접 객체를 생성하지 못하도록 하기위해

	//현재 객체를 생성해서 리턴하는 메소드 생성
	public static Test getInstance() {

		return t;
	}

}

new Test(); // 자동으로 기본 생성자 삽입, 외부에서 객체 생성 불가

	Test t1 = Test.getInstance();
	Test t2 = Test.getInstance();
	Test t3 = Test.getInstance();


Exception
1) 체크 예외 - 컴파일에 오류 발생 (반드시 예외처리 필수)
2) 비체크 예외 - 실행 도중 발생하는 예외로 처리는 선택 (RuntimeException)

>> 처리 방법
1) 직접처리 - try, catch
1-1. 
try {
	발생 가능성이 있는 코드 작성;
	
} catch(XXXException e) { //catch 여러개 작성할때는 반드시 서브 클래스부터 작성해야함!!
	예외가 발생했을 때 해야하는 일 작성
} catch(XXXException e) {
	예외가 발생했을 때 해야하는 일 작성
} catch(XXXException e) {
	예외가 발생했을 때 해야하는 일 작성
} finally {
	예외발생 여부와 상관없이 무조건 실행해야하는 일 작성
}
* catch 나 finally 블럭은 반드시 try와 함께 사용해야함
* 강제로 예외 발생시키기 - throw 발생할 예외 객체;
- 발생할 예외 객체를 어떤 클래스로 할 것인가
1) 반드시 예외처리 ? > Exception
2) 예외처리 선택? > RunTimeException

2) 던지기 (위임) - throws 
 : 메소드를 호출한 주체에게 예외를 위임하는 것 - 던지는 이유 : 하나의 프로세스 안에서 한쪽으로 몰아서 한 번에 처리
				메소드를 호추하는 주체가 예외처리를 직접 할 수 있도록 정보 제공하는 의도도 존재

* 사용자정의 Exception class를 만들어서 사용 가능
 class XXXException extends Exception { //체크예외
	XXXException() {
		super("기본 메세지 작성");
	}
	XXXException(String messsage) {
		super(message)l
	}
}

 class XXXException extends RuntimeException { //비체크예외
	
}
  new XXXException();
  new XXXException("blah blah");