CREATE TABLE MEMBER(
  ID VARCHAR2(20) CONSTRAINT MEMBER_ID_PK PRIMARY KEY ,
  NAME VARCHAR2(10) NOT NULL,
  JUMIN CHAR(13) ,
  AGE NUMBER(2) , -- -99 ~ 99
  ADDR VARCHAR2(10 CHAR) ,
  REG_DATE DATE
);

--테이블 검색
SELECT * FROM MEMBER;

--테이블 구조
DESC MEMBER;


/*
  레코드 등록
  INSERT INTO 테이블이름(컬럼명, 컬럼명,....) VALUES(값, 값,값,....);
  INSERT INTO 테이블이름 VALUES(값, 값,값,....); -- 모든 컬럼에 순서대로 값을 넣을때!!!
*/

INSERT INTO MEMBER VALUES('JANG','장희정','1111',20,'서울','2022-1-20');
INSERT INTO MEMBER(ID,NAME) VALUES('HEE','나영');

--중복
INSERT INTO MEMBER(ID,NAME) VALUES('HEE','효리');--X

INSERT INTO MEMBER(ID,NAME) VALUES('hee','효리'); --데이터는 대소문자 다르다.  

INSERT INTO MEMBER(NAME) VALUES('효리'); --X

INSERT INTO MEMBER(ID,NAME) VALUES('AA','소녀시대'); --X
INSERT INTO MEMBER(ID,NAME,ADDR) VALUES('BB','소희','서울시 강남구 도곡'); --O

INSERT INTO MEMBER(ID,NAME,ADDR) VALUES('CC','소희','서울시 강남구 도곡22'); --X

INSERT INTO MEMBER(ID,NAME, AGE) VALUES('DD','소희',100);  --X
INSERT INTO MEMBER(ID,NAME, AGE) VALUES('DD','소희',99);
INSERT INTO MEMBER(ID,NAME, AGE) VALUES('FF','소희',-99);

INSERT INTO MEMBER(ID,NAME, REG_DATE) VALUES('EE','효민',SYSDATE);

--레코드 검색
SELECT * FROM MEMBER;


--char vs varchar2 비교
INSERT INTO MEMBER(ID, NAME, JUMIN) VALUES('GG','A','B');

INSERT INTO MEMBER(ID, NAME, JUMIN) VALUES('TT','A ','B ');


--VARCHAR2 비교 
SELECT * FROM MEMBER WHERE NAME ='A ';

-- CHAR 비교
SELECT * FROM MEMBER WHERE JUMIN ='B ';
---------------------------------------------------------
/*
  테이블 삭제
  DROP TABLE 테이블이름;
*/

drop table member;

CREATE TABLE MEMBER(
  ID VARCHAR2(20) ,
  NAME VARCHAR2(10) NOT NULL,
  JUMIN CHAR(13) ,
  AGE NUMBER(2) ,
  ADDR VARCHAR2(10 CHAR) ,
  REG_DATE DATE ,
  CONSTRAINT MEM_ID_JUMIN_PK PRIMARY KEY(ID,JUMIN)
);

INSERT INTO MEMBER VALUES('JANG','희정','11111',15, NULL ,SYSDATE);

INSERT INTO MEMBER(ID,JUMIN , NAME) VALUES('JANG','22222','나영');

INSERT INTO MEMBER(ID,JUMIN , NAME) VALUES('HEE','22222','나영');

select * from member;

CREATE TABLE DEPT(
  DEPT_CODE CHAR(3) CONSTRAINT DEPT_CODE_PK  PRIMARY KEY,
  DNAME VARCHAR2(30) NOT NULL,
  LOC VARCHAR2(50)
);
INSERT INTO DEPT VALUES('A01','경리부','서울');
INSERT INTO DEPT VALUES('A02','교육부','대구');
INSERT INTO DEPT VALUES('A03','전산부','서울');

select * from dept;

CREATE TABLE  EMP(
  EMP_NO NUMBER(3) CONSTRAINT EMP_NO_PK PRIMARY KEY,
  ENAME VARCHAR2(10) NOT NULL,
  SAL NUMBER(5),
  DEPT_CODE CHAR(3) CONSTRAINT EMP_CODE_FK REFERENCES DEPT(DEPT_CODE) ,  -- FK
  HIREDATE DATE DEFAULT SYSDATE --기본값설정
);

INSERT INTO EMP(EMP_NO, ENAME, SAL, DEPT_CODE)VALUES(100,'장희정',3000,'A01');

INSERT INTO EMP VALUES(200,'이효리',1500,'A01',NULL);

INSERT INTO EMP VALUES(300,'이미선',200,NULL , DEFAULT);

DELETE FROM DEPT WHERE DEPT_CODE='A03'; --성공

DELETE FROM EMP WHERE DEPT_CODE='A01'; --자식 삭제
DELETE FROM DEPT WHERE DEPT_CODE='A01'; --부모 삭제 

DROP TABLE EMP;
DROP TABLE DEPT;

CREATE TABLE DEPT(
  DEPT_CODE CHAR(3) CONSTRAINT DEPT_CODE_PK  PRIMARY KEY,
  DNAME VARCHAR2(30) NOT NULL,
  LOC VARCHAR2(50)
);
INSERT INTO DEPT VALUES('A01','경리부','서울');
INSERT INTO DEPT VALUES('A02','교육부','대구');
INSERT INTO DEPT VALUES('A03','전산부','서울');

CREATE TABLE  EMP(
  EMP_NO NUMBER(3) CONSTRAINT EMP_NO_PK PRIMARY KEY,
  ENAME VARCHAR2(10) NOT NULL,
  SAL NUMBER(5),
  DEPT_CODE CHAR(3) CONSTRAINT EMP_CODE_FK REFERENCES DEPT(DEPT_CODE) ON DELETE CASCADE ,  -- FK
  HIREDATE DATE DEFAULT SYSDATE --기본값설정
);

CREATE TABLE  EMP(
  EMP_NO NUMBER(3) CONSTRAINT EMP_NO_PK PRIMARY KEY,
  ENAME VARCHAR2(10) NOT NULL,
  SAL NUMBER(5),
  DEPT_CODE CHAR(3) CONSTRAINT EMP_CODE_FK REFERENCES DEPT(DEPT_CODE) ON DELETE set null ,  -- FK
  HIREDATE DATE DEFAULT SYSDATE --기본값설정
);

CREATE TABLE  EMP(
  EMP_NO NUMBER(3) CONSTRAINT EMP_NO_PK PRIMARY KEY,
  ENAME VARCHAR2(10) NOT NULL,
  SAL NUMBER(5),
  DEPT_CODE CHAR(3) CONSTRAINT EMP_fk REFERENCES DEPT(DEPT_CODE) ,  -- FK
  HIREDATE DATE DEFAULT SYSDATE --기본값설정
);


INSERT INTO EMP VALUES(200,'이효리',1500,'A01',NULL);
INSERT INTO EMP VALUES(300,'장희정',1500,'A01',NULL);
INSERT INTO EMP VALUES(400,'장희정',1500,'A02',NULL);

DELETE FROM DEPT WHERE DEPT_CODE='A01';

--삭제!!!!!
/*
   레코드 삭제방법
    1) ROLLBACK 처리가능 - DML
      DELETE [FROM] 테이블이름
      [WHERE 조건식]
      
        * FROM 생략가능, WHERE절이 없으면 모든 레코드가 삭제된다.
          
    2) ROLLBACK 안된다. - DDL
     TRUNCATE TABLE 테이블이름; --모든레코드를 삭제
      
*/
commit;
rollback;

/*
  3) UNIQUE
      : 중복안됨, NULL허용(NOT NULL을 설정하면 PK와 동일) 
      : 후보키중에 대표키가 될수 없는 키를 UNIQUE 설정한다. 
      :  한테이블에 여러개의 컬럼에 설정가능
      
  4) CHECK
      : 조건을 설정하여 조건에 만족하지 않는 정보는 INSERT 할수 없다!
    
  
  5) DEFAULT
      : 기본값 설정(자주사용되는 값을 미리 설정해놓고 자동으로 값이 들어갈수 있또록 하는것)
      : EX) 등록일, 조회수....
      : DEFAULT를 설정할때는 CONSTRAINT 별칭은 안쓴다!!!
      : NOT NULL을 설정하면 DEFALUT를 함께 사용할때는 반드시 DEFAULT를 먼저 작성한다.
*/

CREATE TABLE TEST(
  ID VARCHAR2(10)  PRIMARY KEY,
  JUMIN CHAR(13) NOT NULL UNIQUE,
  NAME VARCHAR2(10) UNIQUE, --중복X, NULL허용
  AGE NUMBER(2) CHECK(AGE >=20 AND AGE <= 30),
  GENDER CHAR(3) CHECK(GENDER='남' OR GENDER='여'),
  LOC VARCHAR2(10) DEFAULT '서울',
  REG_DATE DATE  DEFAULT SYSDATE NOT NULL -- 순서중요
);


DROP TABLE TEST;
SELECT * FROM TEST;

INSERT INTO TEST VALUES('JANG','111','희정',22,'남',DEFAULT, DEFAULT);

INSERT INTO TEST(ID,JUMIN,NAME,AGE,GENDER) VALUES('HEE','222','나영',22,'남');

INSERT INTO TEST(ID,JUMIN,NAME,AGE,GENDER) VALUES('KIM',NULL,'희선',22,'여');--JUMIN에 NULL허용 X
INSERT INTO TEST(ID,JUMIN,NAME,AGE,GENDER) VALUES('KIM','222','희선',22,'여');--JUMIN에 중복 허용 X


INSERT INTO TEST(ID,JUMIN,NAME,AGE,GENDER) VALUES('AA','333',NULL,22,'여'); --NAME에 NULL허용 O
INSERT INTO TEST(ID,JUMIN,NAME,AGE,GENDER) VALUES('BB','444',NULL,22,'여');  --NAME에 또 NULL허용 O

INSERT INTO TEST(ID,JUMIN,NAME,AGE,GENDER) VALUES('CC','55','정희',31,'남'); -- 나이체크 X

INSERT INTO TEST(ID,JUMIN,NAME,AGE,GENDER) VALUES('DD','555','효민',26,'M');  --성별체크 X

/*
  테이블 수정
  
 ① 컬럼추가
  alter table 테이블이름 add 
     (컬럼명 자료형 [제약조건] , 컬럼명 자료형 [제약조건] , ....)
 
 ② 컬럼삭제
 alter table 테이블이름 drop column 컬럼이름
 
 ③ datatype변경
    alter table 테이블이름 modify 컬럼이름 변경자료형
    
④ 컬럼이름 변경
 alter table 테이블이름 rename column 기존컬럼명 to 변경컬럼명
 
 ⑤ 제약조건 추가
  alter table 테이블이름 ADD CONSTRAINT 별칭 제약조건종류 ;
  
 -제약조건 삭제
  ALTER TABLE 테이블이름 DROP CONSTRAINT 별칭;
  
 
 - 테이블 삭제
 drop table 테이블이름

*/

SELECT * FROM TEST;
ALTER TABLE  TEST ADD (PHONE VARCHAR2(10) , ETC VARCHAR2(20) DEFAULT '기타' NOT NULL );

 alter table TEST ADD CONSTRAINT PHONE_CK CHECK(PHONE='1111' OR PHONE='2222');
 
 ALTER TABLE TEST DROP CONSTRAINT PHONE_CK;
 
 /*
SQL의 종류
 - DDL문장(CREATE, DROP, ALTER, TRUNCATE)
 - DML문장(INSERT ,UPDATE, DELETE)
*/

/*
  데이터 조작 : DML(INSERT , UPDATE, DELETE)
   - ROLLBACK OR COMMIT 가능
   
   1) INSERT문장
       -INSERT INTO 테이블이름(컬럼명, 컬럼명,....) VALUES(값, 값,값,....);
       -INSERT INTO 테이블이름 VALUES(값, 값,값,....); -- 모든 컬럼에 순서대로 값을 넣을때!!!
   
   2) DELETE문장
       DELETE [FROM] 테이블이름
       [WHERE 조건식]
   
   3) UPDATE문장
      UPDATE 테이블이름
      SET 컬럼명=변경값 , 컬럼명=변경값,....
      [WHERE 조건식] 

*/
--샘플테이블 필요하다. 
/*
   --테이블 복사
   CREATE TABLE 테이블이름
   AS 복사할테이블정보;
   
   
    주의 : 테이블을 복사하면 제약조건은 복사 안된다!!! - 복사한후에 제약조건을 ALTER를 이용해서 추가한다.

*/

--1)모든컬럼, 모든레코드 복사하기
CREATE TABLE COPY_EMP
AS SELECT *FROM EMP;

SELECT * FROM COPY_EMP;

--2)원하는 컬럼, 원하는 레코드만 복사하기
CREATE TABLE COPY_EMP2
AS SELECT EMPNO, ENAME, JOB, SAL, DEPTNO FROM EMP WHERE DEPTNO=20;

SELECT * FROM COPY_EMP2;


--3)테이블의 구조만 복사하기 
CREATE TABLE COPY_EMP3
AS SELECT * FROM EMP WHERE 1=0;

SELECT * FROM COPY_EMP3;
DESC COPY_EMP3;


--COPY_EMP 테이블의 내용을 수정, 삭제
SELECT * FROM COPY_EMP;












